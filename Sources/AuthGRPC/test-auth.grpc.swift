//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: test-auth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `TestAuthServiceClient`, then call methods of this protocol to make API calls.
public protocol TestAuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: TestAuthServiceClientInterceptorFactoryProtocol? { get }

  func testAnyAccess(
    _ request: TestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TestRequest, TestResponse>

  func testBuyerAccess(
    _ request: TestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TestRequest, TestResponse>
}

extension TestAuthServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.contract.auth.TestAuthService"
  }

  /// Unary call to testAnyAccess
  ///
  /// - Parameters:
  ///   - request: Request to send to testAnyAccess.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testAnyAccess(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TestRequest, TestResponse> {
    return self.makeUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testAnyAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestAnyAccessInterceptors() ?? []
    )
  }

  /// Unary call to testBuyerAccess
  ///
  /// - Parameters:
  ///   - request: Request to send to testBuyerAccess.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testBuyerAccess(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TestRequest, TestResponse> {
    return self.makeUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testBuyerAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestBuyerAccessInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension TestAuthServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "TestAuthServiceNIOClient")
public final class TestAuthServiceClient: TestAuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: TestAuthServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: TestAuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.contract.auth.TestAuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TestAuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct TestAuthServiceNIOClient: TestAuthServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: TestAuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.contract.auth.TestAuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TestAuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol TestAuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: TestAuthServiceClientInterceptorFactoryProtocol? { get }

  func makeTestAnyAccessCall(
    _ request: TestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TestRequest, TestResponse>

  func makeTestBuyerAccessCall(
    _ request: TestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TestRequest, TestResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension TestAuthServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return TestAuthServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: TestAuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeTestAnyAccessCall(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TestRequest, TestResponse> {
    return self.makeAsyncUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testAnyAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestAnyAccessInterceptors() ?? []
    )
  }

  public func makeTestBuyerAccessCall(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TestRequest, TestResponse> {
    return self.makeAsyncUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testBuyerAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestBuyerAccessInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension TestAuthServiceAsyncClientProtocol {
  public func testAnyAccess(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> TestResponse {
    return try await self.performAsyncUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testAnyAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestAnyAccessInterceptors() ?? []
    )
  }

  public func testBuyerAccess(
    _ request: TestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> TestResponse {
    return try await self.performAsyncUnaryCall(
      path: TestAuthServiceClientMetadata.Methods.testBuyerAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestBuyerAccessInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct TestAuthServiceAsyncClient: TestAuthServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: TestAuthServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TestAuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol TestAuthServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'testAnyAccess'.
  func maketestAnyAccessInterceptors() -> [ClientInterceptor<TestRequest, TestResponse>]

  /// - Returns: Interceptors to use when invoking 'testBuyerAccess'.
  func maketestBuyerAccessInterceptors() -> [ClientInterceptor<TestRequest, TestResponse>]
}

public enum TestAuthServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TestAuthService",
    fullName: "ru.zveron.contract.auth.TestAuthService",
    methods: [
      TestAuthServiceClientMetadata.Methods.testAnyAccess,
      TestAuthServiceClientMetadata.Methods.testBuyerAccess,
    ]
  )

  public enum Methods {
    public static let testAnyAccess = GRPCMethodDescriptor(
      name: "testAnyAccess",
      path: "/ru.zveron.contract.auth.TestAuthService/testAnyAccess",
      type: GRPCCallType.unary
    )

    public static let testBuyerAccess = GRPCMethodDescriptor(
      name: "testBuyerAccess",
      path: "/ru.zveron.contract.auth.TestAuthService/testBuyerAccess",
      type: GRPCCallType.unary
    )
  }
}

