// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bucket.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum MimeType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case imageJpeg // = 0
  case imagePng // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .imageJpeg
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .imageJpeg
    case 1: self = .imagePng
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .imageJpeg: return 0
    case .imagePng: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MimeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [MimeType] = [
    .imageJpeg,
    .imagePng,
  ]
}

#endif  // swift(>=4.2)

///для чего предназначается изображение
public enum FlowSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case order // = 0
  case profile // = 1
  case lot // = 2
  case chat // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .order
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .order
    case 1: self = .profile
    case 2: self = .lot
    case 3: self = .chat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .order: return 0
    case .profile: return 1
    case .lot: return 2
    case .chat: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FlowSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [FlowSource] = [
    .order,
    .profile,
    .lot,
    .chat,
  ]
}

#endif  // swift(>=4.2)

public struct UploadImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: Data = Data()

  public var height: Int32 = 0

  public var width: Int32 = 0

  public var mimeType: MimeType = .imageJpeg

  public var flowSource: FlowSource = .order

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct UploadImageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var imageID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MimeType: @unchecked Sendable {}
extension FlowSource: @unchecked Sendable {}
extension UploadImageRequest: @unchecked Sendable {}
extension UploadImageResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.zveron.contract.objectstorage.external"

extension MimeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMAGE_JPEG"),
    1: .same(proto: "IMAGE_PNG"),
  ]
}

extension FlowSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDER"),
    1: .same(proto: "PROFILE"),
    2: .same(proto: "LOT"),
    3: .same(proto: "CHAT"),
  ]
}

extension UploadImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadImageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "body"),
    2: .same(proto: "height"),
    3: .same(proto: "width"),
    4: .same(proto: "mimeType"),
    5: .standard(proto: "flow_source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.body) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.mimeType) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.flowSource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.body.isEmpty {
      try visitor.visitSingularBytesField(value: self.body, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.mimeType != .imageJpeg {
      try visitor.visitSingularEnumField(value: self.mimeType, fieldNumber: 4)
    }
    if self.flowSource != .order {
      try visitor.visitSingularEnumField(value: self.flowSource, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: UploadImageRequest, rhs: UploadImageRequest) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.flowSource != rhs.flowSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UploadImageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadImageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.imageID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.imageID != 0 {
      try visitor.visitSingularInt64Field(value: self.imageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: UploadImageResponse, rhs: UploadImageResponse) -> Bool {
    if lhs.imageID != rhs.imageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
