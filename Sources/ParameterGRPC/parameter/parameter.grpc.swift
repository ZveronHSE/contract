//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: parameter.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ru_Zveron_Contract_Parameter_ParameterServiceClient`, then call methods of this protocol to make API calls.
public protocol Ru_Zveron_Contract_Parameter_ParameterServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? { get }

  func getParametersByCategory(
    _ request: Ru_Zveron_Contract_Parameter_ParameterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Parameter_ParameterRequest, Ru_Zveron_Contract_Parameter_ParameterResponse>

  func validateValuesForParameters(
    _ request: Ru_Zveron_Contract_Parameter_ParameterValueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Parameter_ParameterValueRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Ru_Zveron_Contract_Parameter_ParameterServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.contract.parameter.ParameterService"
  }

  /// Получить список параметров для определенной категории и типа объявления.
  ///
  /// - Parameters:
  ///   - request: Request to send to getParametersByCategory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getParametersByCategory(
    _ request: Ru_Zveron_Contract_Parameter_ParameterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Parameter_ParameterRequest, Ru_Zveron_Contract_Parameter_ParameterResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.getParametersByCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetParametersByCategoryInterceptors() ?? []
    )
  }

  /// Проверка, что пользователь правильно ввел значения для параметров. Если все ок - вернется пустой ответ, иначе ошибка.
  ///
  /// - Parameters:
  ///   - request: Request to send to validateValuesForParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validateValuesForParameters(
    _ request: Ru_Zveron_Contract_Parameter_ParameterValueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Parameter_ParameterValueRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.validateValuesForParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makevalidateValuesForParametersInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ru_Zveron_Contract_Parameter_ParameterServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ru_Zveron_Contract_Parameter_ParameterServiceNIOClient")
public final class Ru_Zveron_Contract_Parameter_ParameterServiceClient: Ru_Zveron_Contract_Parameter_ParameterServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.contract.parameter.ParameterService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ru_Zveron_Contract_Parameter_ParameterServiceNIOClient: Ru_Zveron_Contract_Parameter_ParameterServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.contract.parameter.ParameterService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ru_Zveron_Contract_Parameter_ParameterServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? { get }

  func makeGetParametersByCategoryCall(
    _ request: Ru_Zveron_Contract_Parameter_ParameterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Parameter_ParameterRequest, Ru_Zveron_Contract_Parameter_ParameterResponse>

  func makeValidateValuesForParametersCall(
    _ request: Ru_Zveron_Contract_Parameter_ParameterValueRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Parameter_ParameterValueRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Parameter_ParameterServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetParametersByCategoryCall(
    _ request: Ru_Zveron_Contract_Parameter_ParameterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Parameter_ParameterRequest, Ru_Zveron_Contract_Parameter_ParameterResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.getParametersByCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetParametersByCategoryInterceptors() ?? []
    )
  }

  public func makeValidateValuesForParametersCall(
    _ request: Ru_Zveron_Contract_Parameter_ParameterValueRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Parameter_ParameterValueRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.validateValuesForParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makevalidateValuesForParametersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Parameter_ParameterServiceAsyncClientProtocol {
  public func getParametersByCategory(
    _ request: Ru_Zveron_Contract_Parameter_ParameterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Parameter_ParameterResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.getParametersByCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetParametersByCategoryInterceptors() ?? []
    )
  }

  public func validateValuesForParameters(
    _ request: Ru_Zveron_Contract_Parameter_ParameterValueRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.validateValuesForParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makevalidateValuesForParametersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ru_Zveron_Contract_Parameter_ParameterServiceAsyncClient: Ru_Zveron_Contract_Parameter_ParameterServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ru_Zveron_Contract_Parameter_ParameterServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getParametersByCategory'.
  func makegetParametersByCategoryInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Parameter_ParameterRequest, Ru_Zveron_Contract_Parameter_ParameterResponse>]

  /// - Returns: Interceptors to use when invoking 'validateValuesForParameters'.
  func makevalidateValuesForParametersInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Parameter_ParameterValueRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ParameterService",
    fullName: "ru.zveron.contract.parameter.ParameterService",
    methods: [
      Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.getParametersByCategory,
      Ru_Zveron_Contract_Parameter_ParameterServiceClientMetadata.Methods.validateValuesForParameters,
    ]
  )

  public enum Methods {
    public static let getParametersByCategory = GRPCMethodDescriptor(
      name: "getParametersByCategory",
      path: "/ru.zveron.contract.parameter.ParameterService/getParametersByCategory",
      type: GRPCCallType.unary
    )

    public static let validateValuesForParameters = GRPCMethodDescriptor(
      name: "validateValuesForParameters",
      path: "/ru.zveron.contract.parameter.ParameterService/validateValuesForParameters",
      type: GRPCCallType.unary
    )
  }
}

