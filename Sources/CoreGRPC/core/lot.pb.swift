// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Status: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case active // = 0
  case closed // = 1
  case canceled // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .active
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .active
    case 1: self = .closed
    case 2: self = .canceled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .active: return 0
    case .closed: return 1
    case .canceled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Status] = [
    .active,
    .closed,
    .canceled,
  ]
}

#endif  // swift(>=4.2)

public struct Lot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID объявления
  public var id: Int64 = 0

  public var title: String = String()

  /// Если цены нет, то придет текст, например "Договорная", а если есть цена - то число. Этим и обусловен выбор string тут.
  public var price: String = String()

  /// Отформатированный текст, когда было опубликован объявление. Пример: 15 января 2022
  public var publicationDate: String = String()

  public var imageURL: String = String()

  /// Красить кнопку "Избранное", если оно уже и так добавлено в избранное, иначе нет.
  public var favorite: Bool = false

  /// В каком статусе находится объявление
  public var status: Status = .active

  /// Категория объявления, заполняется не всегда
  public var categoryID: Int32 {
    get {return _categoryID ?? 0}
    set {_categoryID = newValue}
  }
  /// Returns true if `categoryID` has been explicitly set.
  public var hasCategoryID: Bool {return self._categoryID != nil}
  /// Clears the value of `categoryID`. Subsequent reads from it will return its default value.
  public mutating func clearCategoryID() {self._categoryID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _categoryID: Int32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Status: @unchecked Sendable {}
extension Lot: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.zveron.contract.core"

extension Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTIVE"),
    1: .same(proto: "CLOSED"),
    2: .same(proto: "CANCELED"),
  ]
}

extension Lot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Lot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "price"),
    4: .standard(proto: "publication_date"),
    5: .standard(proto: "image_url"),
    6: .same(proto: "favorite"),
    7: .same(proto: "status"),
    8: .standard(proto: "category_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.publicationDate) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.favorite) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._categoryID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 3)
    }
    if !self.publicationDate.isEmpty {
      try visitor.visitSingularStringField(value: self.publicationDate, fieldNumber: 4)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 5)
    }
    if self.favorite != false {
      try visitor.visitSingularBoolField(value: self.favorite, fieldNumber: 6)
    }
    if self.status != .active {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    try { if let v = self._categoryID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lot, rhs: Lot) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.price != rhs.price {return false}
    if lhs.publicationDate != rhs.publicationDate {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.favorite != rhs.favorite {return false}
    if lhs.status != rhs.status {return false}
    if lhs._categoryID != rhs._categoryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
