syntax = "proto3";

package ru.zveron.contract.chat;

option swift_prefix = "";
option java_package = "ru.zveron.contract.chat";
option java_outer_classname = "ChatGrpcExternal";
option java_multiple_files = true;

import "model/chat.proto";
import "model/message.proto";

service ChatServiceExternal {

  rpc BidiChatRoute(stream ChatRouteRequest) returns(stream ChatRouteResponse);
}

message ChatRouteRequest {
  oneof request {
    GetRecentChatsRequest get_recent_chats = 1;
    GetChatMessagesRequest get_chat_recent_messages = 2;
    SendMessageRequest send_message = 3;
    AttachLotRequest attach_lot = 4;
    DetachLotRequest detach_lot = 5;
    SendEventRequest send_event = 6;
  }
}

// Запрос на получение недавних чатов
message GetRecentChatsRequest {
  optional model.ChatPagination pagination = 1;
}

// Запрос на получение сообщений в чате
message GetChatMessagesRequest {
  string chat_id = 1;
  optional model.MessagePagination pagination = 2;
}

// Отправка сообщения
message SendMessageRequest {
  model.MessageType type = 1;
  // Только для MessageType.DEFAULT
  optional string text = 2;
  // Только для MessageType.DEFAULT
  repeated uint64 images_urls = 3;
}

// Добавление объявления в диалог. Если диалога нет - начало диалога
message AttachLotRequest {
  uint64 interlocutor_id = 1;
  uint64 lot_id = 2;
  optional string chat_id = 3;
}

// Удаление объявления из диалога
message DetachLotRequest {
  uint64 interlocutor_id = 1;
  uint64 lot_id = 2;
  string chat_id = 3;
}

// Отправка события
message SendEventRequest {
  oneof event {
    model.DisconnectEvent disconnect_event = 1;
    model.ChangeMessagesStatusEvent changed_status_event = 2;
    model.NoPayloadEvent no_payload_event = 3;
  }
}

message ChatRouteResponse {
  oneof response {
    GetRecentChatsResponse get_recent_chats = 1;
    GetChatMessagesResponse get_messages_response = 2;
    ReceiveEvent receive_event = 3;
  }
}

// Недавние чаты
message GetRecentChatsResponse {
  repeated model.Chat chats = 1;
}

// Сообщения в чате
message GetChatMessagesResponse {
  repeated model.Message messages = 1;
}

// Событие в чате
message ReceiveEvent {
  oneof event {
    model.DisconnectEvent disconnect_event = 1;
    model.ChangeMessagesStatusEvent changed_status_event = 2;
    model.NoPayloadEvent no_payload_event = 3;
  }
}

message ReceiveMessage {
  model.Message message = 1;
}