// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum MessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `default` // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [MessageType] = [
    .default,
  ]
}

#endif  // swift(>=4.2)

public enum NoPayloadEventType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Событие, сигнализирующее о том, что собеседник набирает сообщение
  case texting // = 0

  /// Событие подключения пользователя к чату
  case online // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .texting
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .texting
    case 1: self = .online
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .texting: return 0
    case .online: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NoPayloadEventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [NoPayloadEventType] = [
    .texting,
    .online,
  ]
}

#endif  // swift(>=4.2)

public struct MessagePagination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Получить сообщения предшествующие сообщению с id messages_before_id
  public var messagesBeforeID: String = String()

  /// Количество получаемых сообщений не больше чем size
  public var size: UInt32 {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _size: UInt32? = nil
}

public struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var text: String = String()

  public var isRead: Bool = false

  public var imagesUrls: [String] = []

  public var senderID: UInt64 = 0

  public var sentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _sentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_sentAt = newValue}
  }
  /// Returns true if `sentAt` has been explicitly set.
  public var hasSentAt: Bool {return self._sentAt != nil}
  /// Clears the value of `sentAt`. Subsequent reads from it will return its default value.
  public mutating func clearSentAt() {self._sentAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Событие выхода пользователя из сети
public struct DisconnectEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional в запросе, Required в ответе
  public var lastOnlineFormatted: String {
    get {return _lastOnlineFormatted ?? String()}
    set {_lastOnlineFormatted = newValue}
  }
  /// Returns true if `lastOnlineFormatted` has been explicitly set.
  public var hasLastOnlineFormatted: Bool {return self._lastOnlineFormatted != nil}
  /// Clears the value of `lastOnlineFormatted`. Subsequent reads from it will return its default value.
  public mutating func clearLastOnlineFormatted() {self._lastOnlineFormatted = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastOnlineFormatted: String? = nil
}

/// Событие, отмечающее, что сообщения по указанным идентификаторам были прочитаны
public struct ChangeMessagesStatusEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ids: [String] = []

  public var isRead: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct NoPayloadEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: NoPayloadEventType = .texting

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MessageType: @unchecked Sendable {}
extension NoPayloadEventType: @unchecked Sendable {}
extension MessagePagination: @unchecked Sendable {}
extension Message: @unchecked Sendable {}
extension DisconnectEvent: @unchecked Sendable {}
extension ChangeMessagesStatusEvent: @unchecked Sendable {}
extension NoPayloadEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.zveron.contract.chat.model"

extension MessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
  ]
}

extension NoPayloadEventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXTING"),
    1: .same(proto: "ONLINE"),
  ]
}

extension MessagePagination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessagePagination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "messages_before_id"),
    2: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messagesBeforeID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messagesBeforeID.isEmpty {
      try visitor.visitSingularStringField(value: self.messagesBeforeID, fieldNumber: 1)
    }
    try { if let v = self._size {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MessagePagination, rhs: MessagePagination) -> Bool {
    if lhs.messagesBeforeID != rhs.messagesBeforeID {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .standard(proto: "is_read"),
    4: .standard(proto: "images_urls"),
    5: .standard(proto: "sender_id"),
    6: .standard(proto: "sent_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isRead) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.imagesUrls) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.senderID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._sentAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if self.isRead != false {
      try visitor.visitSingularBoolField(value: self.isRead, fieldNumber: 3)
    }
    if !self.imagesUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imagesUrls, fieldNumber: 4)
    }
    if self.senderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.senderID, fieldNumber: 5)
    }
    try { if let v = self._sentAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.text != rhs.text {return false}
    if lhs.isRead != rhs.isRead {return false}
    if lhs.imagesUrls != rhs.imagesUrls {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs._sentAt != rhs._sentAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DisconnectEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisconnectEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_online_formatted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._lastOnlineFormatted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._lastOnlineFormatted {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DisconnectEvent, rhs: DisconnectEvent) -> Bool {
    if lhs._lastOnlineFormatted != rhs._lastOnlineFormatted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChangeMessagesStatusEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeMessagesStatusEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
    2: .standard(proto: "is_read"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isRead) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    if self.isRead != false {
      try visitor.visitSingularBoolField(value: self.isRead, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ChangeMessagesStatusEvent, rhs: ChangeMessagesStatusEvent) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.isRead != rhs.isRead {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NoPayloadEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NoPayloadEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .texting {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: NoPayloadEvent, rhs: NoPayloadEvent) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
