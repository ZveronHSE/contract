//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crud.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ru_Zveron_BlacklistServiceClient`, then call methods of this protocol to make API calls.
public protocol Ru_Zveron_BlacklistServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? { get }

  func existInBlacklist(
    _ request: Ru_Zveron_ExistInBlacklistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_ExistInBlacklistRequest, Ru_Zveron_ExistInBlacklistResponse>

  func getBlacklist(
    _ request: Ru_Zveron_GetBlacklistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_GetBlacklistRequest, Ru_Zveron_GetBlacklistResponse>

  func addToBlacklist(
    _ request: Ru_Zveron_AddToBlacklistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_AddToBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteFromBlacklist(
    _ request: Ru_Zveron_DeleteFromBlacklistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_DeleteFromBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteAllRecordsWhereUserBlocks(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteAllRecordsWhereUserIsBlocked(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Ru_Zveron_BlacklistServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.BlacklistService"
  }

  /// Проверяет наличие определенного пользователя в черном списке владельца
  ///
  /// - Parameters:
  ///   - request: Request to send to ExistInBlacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func existInBlacklist(
    _ request: Ru_Zveron_ExistInBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_ExistInBlacklistRequest, Ru_Zveron_ExistInBlacklistResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.existInBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExistInBlacklistInterceptors() ?? []
    )
  }

  /// Получение списка всех добавленных в черный список владельца других пользователей
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBlacklist(
    _ request: Ru_Zveron_GetBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_GetBlacklistRequest, Ru_Zveron_GetBlacklistResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.getBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlacklistInterceptors() ?? []
    )
  }

  /// Добавление в черный список владельца нового пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to AddToBlacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addToBlacklist(
    _ request: Ru_Zveron_AddToBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_AddToBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.addToBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBlacklistInterceptors() ?? []
    )
  }

  /// Удаление из черного списка владельца определенного пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFromBlacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFromBlacklist(
    _ request: Ru_Zveron_DeleteFromBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_DeleteFromBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteFromBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFromBlacklistInterceptors() ?? []
    )
  }

  /// Удаление всех упоминаний о добавлении в черный список определенного пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllRecordsWhereUserBlocks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAllRecordsWhereUserBlocks(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserBlocksInterceptors() ?? []
    )
  }

  /// Удаление всех записей в черном списке владельца
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllRecordsWhereUserIsBlocked.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAllRecordsWhereUserIsBlocked(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserIsBlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserIsBlockedInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ru_Zveron_BlacklistServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ru_Zveron_BlacklistServiceNIOClient")
public final class Ru_Zveron_BlacklistServiceClient: Ru_Zveron_BlacklistServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.BlacklistService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ru_Zveron_BlacklistServiceNIOClient: Ru_Zveron_BlacklistServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.BlacklistService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ru_Zveron_BlacklistServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? { get }

  func makeExistInBlacklistCall(
    _ request: Ru_Zveron_ExistInBlacklistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_ExistInBlacklistRequest, Ru_Zveron_ExistInBlacklistResponse>

  func makeGetBlacklistCall(
    _ request: Ru_Zveron_GetBlacklistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_GetBlacklistRequest, Ru_Zveron_GetBlacklistResponse>

  func makeAddToBlacklistCall(
    _ request: Ru_Zveron_AddToBlacklistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_AddToBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteFromBlacklistCall(
    _ request: Ru_Zveron_DeleteFromBlacklistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteFromBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteAllRecordsWhereUserBlocksCall(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteAllRecordsWhereUserIsBlockedCall(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_BlacklistServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ru_Zveron_BlacklistServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeExistInBlacklistCall(
    _ request: Ru_Zveron_ExistInBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_ExistInBlacklistRequest, Ru_Zveron_ExistInBlacklistResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.existInBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExistInBlacklistInterceptors() ?? []
    )
  }

  public func makeGetBlacklistCall(
    _ request: Ru_Zveron_GetBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_GetBlacklistRequest, Ru_Zveron_GetBlacklistResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.getBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlacklistInterceptors() ?? []
    )
  }

  public func makeAddToBlacklistCall(
    _ request: Ru_Zveron_AddToBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_AddToBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.addToBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBlacklistInterceptors() ?? []
    )
  }

  public func makeDeleteFromBlacklistCall(
    _ request: Ru_Zveron_DeleteFromBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteFromBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteFromBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFromBlacklistInterceptors() ?? []
    )
  }

  public func makeDeleteAllRecordsWhereUserBlocksCall(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserBlocksInterceptors() ?? []
    )
  }

  public func makeDeleteAllRecordsWhereUserIsBlockedCall(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserIsBlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserIsBlockedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_BlacklistServiceAsyncClientProtocol {
  public func existInBlacklist(
    _ request: Ru_Zveron_ExistInBlacklistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_ExistInBlacklistResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.existInBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExistInBlacklistInterceptors() ?? []
    )
  }

  public func getBlacklist(
    _ request: Ru_Zveron_GetBlacklistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_GetBlacklistResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.getBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlacklistInterceptors() ?? []
    )
  }

  public func addToBlacklist(
    _ request: Ru_Zveron_AddToBlacklistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.addToBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBlacklistInterceptors() ?? []
    )
  }

  public func deleteFromBlacklist(
    _ request: Ru_Zveron_DeleteFromBlacklistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteFromBlacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFromBlacklistInterceptors() ?? []
    )
  }

  public func deleteAllRecordsWhereUserBlocks(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserBlocksInterceptors() ?? []
    )
  }

  public func deleteAllRecordsWhereUserIsBlocked(
    _ request: Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserIsBlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllRecordsWhereUserIsBlockedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ru_Zveron_BlacklistServiceAsyncClient: Ru_Zveron_BlacklistServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ru_Zveron_BlacklistServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'existInBlacklist'.
  func makeExistInBlacklistInterceptors() -> [ClientInterceptor<Ru_Zveron_ExistInBlacklistRequest, Ru_Zveron_ExistInBlacklistResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlacklist'.
  func makeGetBlacklistInterceptors() -> [ClientInterceptor<Ru_Zveron_GetBlacklistRequest, Ru_Zveron_GetBlacklistResponse>]

  /// - Returns: Interceptors to use when invoking 'addToBlacklist'.
  func makeAddToBlacklistInterceptors() -> [ClientInterceptor<Ru_Zveron_AddToBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteFromBlacklist'.
  func makeDeleteFromBlacklistInterceptors() -> [ClientInterceptor<Ru_Zveron_DeleteFromBlacklistRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteAllRecordsWhereUserBlocks'.
  func makeDeleteAllRecordsWhereUserBlocksInterceptors() -> [ClientInterceptor<Ru_Zveron_DeleteAllRecordsWhereUserBlocksRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteAllRecordsWhereUserIsBlocked'.
  func makeDeleteAllRecordsWhereUserIsBlockedInterceptors() -> [ClientInterceptor<Ru_Zveron_DeleteAllRecordsWhereUserIsBlockedRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Ru_Zveron_BlacklistServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BlacklistService",
    fullName: "ru.zveron.BlacklistService",
    methods: [
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.existInBlacklist,
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.getBlacklist,
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.addToBlacklist,
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteFromBlacklist,
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserBlocks,
      Ru_Zveron_BlacklistServiceClientMetadata.Methods.deleteAllRecordsWhereUserIsBlocked,
    ]
  )

  public enum Methods {
    public static let existInBlacklist = GRPCMethodDescriptor(
      name: "ExistInBlacklist",
      path: "/ru.zveron.BlacklistService/ExistInBlacklist",
      type: GRPCCallType.unary
    )

    public static let getBlacklist = GRPCMethodDescriptor(
      name: "GetBlacklist",
      path: "/ru.zveron.BlacklistService/GetBlacklist",
      type: GRPCCallType.unary
    )

    public static let addToBlacklist = GRPCMethodDescriptor(
      name: "AddToBlacklist",
      path: "/ru.zveron.BlacklistService/AddToBlacklist",
      type: GRPCCallType.unary
    )

    public static let deleteFromBlacklist = GRPCMethodDescriptor(
      name: "DeleteFromBlacklist",
      path: "/ru.zveron.BlacklistService/DeleteFromBlacklist",
      type: GRPCCallType.unary
    )

    public static let deleteAllRecordsWhereUserBlocks = GRPCMethodDescriptor(
      name: "DeleteAllRecordsWhereUserBlocks",
      path: "/ru.zveron.BlacklistService/DeleteAllRecordsWhereUserBlocks",
      type: GRPCCallType.unary
    )

    public static let deleteAllRecordsWhereUserIsBlocked = GRPCMethodDescriptor(
      name: "DeleteAllRecordsWhereUserIsBlocked",
      path: "/ru.zveron.BlacklistService/DeleteAllRecordsWhereUserIsBlocked",
      type: GRPCCallType.unary
    )
  }
}

