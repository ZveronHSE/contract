//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: external_lot.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ru_Zveron_Contract_Lot_LotExternalProtoServiceClient`, then call methods of this protocol to make API calls.
public protocol Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? { get }

  func getWaterfall(
    _ request: Ru_Zveron_Contract_Lot_WaterfallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_WaterfallRequest, Ru_Zveron_Contract_Lot_WaterfallResponse>

  func createLot(
    _ request: Ru_Zveron_Contract_Lot_CreateLotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CreateLotRequest, Ru_Zveron_Contract_Lot_CardLot>

  func editLot(
    _ request: Ru_Zveron_Contract_Lot_EditLotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_EditLotRequest, Ru_Zveron_Contract_Lot_CardLot>

  func closeLot(
    _ request: Ru_Zveron_Contract_Lot_CloseLotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CloseLotRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getCardLot(
    _ request: Ru_Zveron_Contract_Lot_CardLotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CardLotRequest, Ru_Zveron_Contract_Lot_CardLot>
}

extension Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.contract.lot.LotExternalProtoService"
  }

  /// Получить список объявлений для ленты
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWaterfall.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWaterfall(
    _ request: Ru_Zveron_Contract_Lot_WaterfallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_WaterfallRequest, Ru_Zveron_Contract_Lot_WaterfallResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getWaterfall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaterfallInterceptors() ?? []
    )
  }

  /// Unary call to CreateLot
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateLot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createLot(
    _ request: Ru_Zveron_Contract_Lot_CreateLotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CreateLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.createLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLotInterceptors() ?? []
    )
  }

  /// Unary call to EditLot
  ///
  /// - Parameters:
  ///   - request: Request to send to EditLot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func editLot(
    _ request: Ru_Zveron_Contract_Lot_EditLotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_EditLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.editLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditLotInterceptors() ?? []
    )
  }

  /// Unary call to CloseLot
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseLot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func closeLot(
    _ request: Ru_Zveron_Contract_Lot_CloseLotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CloseLotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.closeLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLotInterceptors() ?? []
    )
  }

  /// Получить информацию про объявление
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCardLot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCardLot(
    _ request: Ru_Zveron_Contract_Lot_CardLotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Lot_CardLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getCardLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCardLotInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ru_Zveron_Contract_Lot_LotExternalProtoServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ru_Zveron_Contract_Lot_LotExternalProtoServiceNIOClient")
public final class Ru_Zveron_Contract_Lot_LotExternalProtoServiceClient: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.contract.lot.LotExternalProtoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ru_Zveron_Contract_Lot_LotExternalProtoServiceNIOClient: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.contract.lot.LotExternalProtoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ru_Zveron_Contract_Lot_LotExternalProtoServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? { get }

  func makeGetWaterfallCall(
    _ request: Ru_Zveron_Contract_Lot_WaterfallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_WaterfallRequest, Ru_Zveron_Contract_Lot_WaterfallResponse>

  func makeCreateLotCall(
    _ request: Ru_Zveron_Contract_Lot_CreateLotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CreateLotRequest, Ru_Zveron_Contract_Lot_CardLot>

  func makeEditLotCall(
    _ request: Ru_Zveron_Contract_Lot_EditLotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_EditLotRequest, Ru_Zveron_Contract_Lot_CardLot>

  func makeCloseLotCall(
    _ request: Ru_Zveron_Contract_Lot_CloseLotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CloseLotRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetCardLotCall(
    _ request: Ru_Zveron_Contract_Lot_CardLotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CardLotRequest, Ru_Zveron_Contract_Lot_CardLot>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Lot_LotExternalProtoServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetWaterfallCall(
    _ request: Ru_Zveron_Contract_Lot_WaterfallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_WaterfallRequest, Ru_Zveron_Contract_Lot_WaterfallResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getWaterfall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaterfallInterceptors() ?? []
    )
  }

  public func makeCreateLotCall(
    _ request: Ru_Zveron_Contract_Lot_CreateLotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CreateLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.createLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLotInterceptors() ?? []
    )
  }

  public func makeEditLotCall(
    _ request: Ru_Zveron_Contract_Lot_EditLotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_EditLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.editLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditLotInterceptors() ?? []
    )
  }

  public func makeCloseLotCall(
    _ request: Ru_Zveron_Contract_Lot_CloseLotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CloseLotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.closeLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLotInterceptors() ?? []
    )
  }

  public func makeGetCardLotCall(
    _ request: Ru_Zveron_Contract_Lot_CardLotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Lot_CardLotRequest, Ru_Zveron_Contract_Lot_CardLot> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getCardLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCardLotInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Lot_LotExternalProtoServiceAsyncClientProtocol {
  public func getWaterfall(
    _ request: Ru_Zveron_Contract_Lot_WaterfallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Lot_WaterfallResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getWaterfall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaterfallInterceptors() ?? []
    )
  }

  public func createLot(
    _ request: Ru_Zveron_Contract_Lot_CreateLotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Lot_CardLot {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.createLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLotInterceptors() ?? []
    )
  }

  public func editLot(
    _ request: Ru_Zveron_Contract_Lot_EditLotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Lot_CardLot {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.editLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditLotInterceptors() ?? []
    )
  }

  public func closeLot(
    _ request: Ru_Zveron_Contract_Lot_CloseLotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.closeLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLotInterceptors() ?? []
    )
  }

  public func getCardLot(
    _ request: Ru_Zveron_Contract_Lot_CardLotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Lot_CardLot {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getCardLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCardLotInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ru_Zveron_Contract_Lot_LotExternalProtoServiceAsyncClient: Ru_Zveron_Contract_Lot_LotExternalProtoServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getWaterfall'.
  func makeGetWaterfallInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Lot_WaterfallRequest, Ru_Zveron_Contract_Lot_WaterfallResponse>]

  /// - Returns: Interceptors to use when invoking 'createLot'.
  func makeCreateLotInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Lot_CreateLotRequest, Ru_Zveron_Contract_Lot_CardLot>]

  /// - Returns: Interceptors to use when invoking 'editLot'.
  func makeEditLotInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Lot_EditLotRequest, Ru_Zveron_Contract_Lot_CardLot>]

  /// - Returns: Interceptors to use when invoking 'closeLot'.
  func makeCloseLotInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Lot_CloseLotRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getCardLot'.
  func makeGetCardLotInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Lot_CardLotRequest, Ru_Zveron_Contract_Lot_CardLot>]
}

public enum Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LotExternalProtoService",
    fullName: "ru.zveron.contract.lot.LotExternalProtoService",
    methods: [
      Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getWaterfall,
      Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.createLot,
      Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.editLot,
      Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.closeLot,
      Ru_Zveron_Contract_Lot_LotExternalProtoServiceClientMetadata.Methods.getCardLot,
    ]
  )

  public enum Methods {
    public static let getWaterfall = GRPCMethodDescriptor(
      name: "GetWaterfall",
      path: "/ru.zveron.contract.lot.LotExternalProtoService/GetWaterfall",
      type: GRPCCallType.unary
    )

    public static let createLot = GRPCMethodDescriptor(
      name: "CreateLot",
      path: "/ru.zveron.contract.lot.LotExternalProtoService/CreateLot",
      type: GRPCCallType.unary
    )

    public static let editLot = GRPCMethodDescriptor(
      name: "EditLot",
      path: "/ru.zveron.contract.lot.LotExternalProtoService/EditLot",
      type: GRPCCallType.unary
    )

    public static let closeLot = GRPCMethodDescriptor(
      name: "CloseLot",
      path: "/ru.zveron.contract.lot.LotExternalProtoService/CloseLot",
      type: GRPCCallType.unary
    )

    public static let getCardLot = GRPCMethodDescriptor(
      name: "GetCardLot",
      path: "/ru.zveron.contract.lot.LotExternalProtoService/GetCardLot",
      type: GRPCCallType.unary
    )
  }
}

