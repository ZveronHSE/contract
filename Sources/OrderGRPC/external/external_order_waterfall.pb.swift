// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: external_order_waterfall.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Field: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Service price per hour or for the whole service
  case price // = 0

  /// Service type
  case orderServiceType // = 1

  /// Creation date
  case dateCreated // = 2

  /// Distance from the user's location
  case distance // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .price
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .price
    case 1: self = .orderServiceType
    case 2: self = .dateCreated
    case 3: self = .distance
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .price: return 0
    case .orderServiceType: return 1
    case .dateCreated: return 2
    case .distance: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Field: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Field] = [
    .price,
    .orderServiceType,
    .dateCreated,
    .distance,
  ]
}

#endif  // swift(>=4.2)

///comparison operations for filters
public enum Operation: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// field equals to
  case equality // = 0

  /// field not equals to
  case negation // = 1

  /// field is greater than
  case greaterThan // = 2

  /// field is greater than or equal to
  case greaterThanEquality // = 3

  /// field is less than
  case lessThan // = 4

  /// field is less than or equal to
  case lessThanEquality // = 5

  /// field is in the list of values
  case `in` // = 6

  /// field is not in the list of values
  case notIn // = 7

  /// field is like
  case like // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .equality
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .equality
    case 1: self = .negation
    case 2: self = .greaterThan
    case 3: self = .greaterThanEquality
    case 4: self = .lessThan
    case 5: self = .lessThanEquality
    case 6: self = .in
    case 7: self = .notIn
    case 8: self = .like
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .equality: return 0
    case .negation: return 1
    case .greaterThan: return 2
    case .greaterThanEquality: return 3
    case .lessThan: return 4
    case .lessThanEquality: return 5
    case .in: return 6
    case .notIn: return 7
    case .like: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Operation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Operation] = [
    .equality,
    .negation,
    .greaterThan,
    .greaterThanEquality,
    .lessThan,
    .lessThanEquality,
    .in,
    .notIn,
    .like,
  ]
}

#endif  // swift(>=4.2)

public enum Sort: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Sort by price
  case byPrice // = 0

  /// Sort by creation date
  case byDateCreated // = 1

  /// Sort by distance
  case byDistance // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .byPrice
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .byPrice
    case 1: self = .byDateCreated
    case 2: self = .byDistance
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .byPrice: return 0
    case .byDateCreated: return 1
    case .byDistance: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sort: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Sort] = [
    .byPrice,
    .byDateCreated,
    .byDistance,
  ]
}

#endif  // swift(>=4.2)

public struct GetWaterfallRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pageSize: Int32 = 0

  public var lastOrderID: Int64 {
    get {return _lastOrderID ?? 0}
    set {_lastOrderID = newValue}
  }
  /// Returns true if `lastOrderID` has been explicitly set.
  public var hasLastOrderID: Bool {return self._lastOrderID != nil}
  /// Clears the value of `lastOrderID`. Subsequent reads from it will return its default value.
  public mutating func clearLastOrderID() {self._lastOrderID = nil}

  public var filters: [Filter] = []

  public var sort: Sort = .byPrice

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastOrderID: Int64? = nil
}

public struct Filter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var field: Field = .price

  public var operation: Operation = .equality

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetWaterfallResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orders: [WaterfallOrder] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct WaterfallOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var animal: Animal {
    get {return _animal ?? Animal()}
    set {_animal = newValue}
  }
  /// Returns true if `animal` has been explicitly set.
  public var hasAnimal: Bool {return self._animal != nil}
  /// Clears the value of `animal`. Subsequent reads from it will return its default value.
  public mutating func clearAnimal() {self._animal = nil}

  public var title: String = String()

  public var price: String = String()

  public var address: Address {
    get {return _address ?? Address()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {self._address = nil}

  public var serviceDate: String = String()

  public var dateCreated: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _animal: Animal? = nil
  fileprivate var _address: Address? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Field: @unchecked Sendable {}
extension Operation: @unchecked Sendable {}
extension Sort: @unchecked Sendable {}
extension GetWaterfallRequest: @unchecked Sendable {}
extension Filter: @unchecked Sendable {}
extension GetWaterfallResponse: @unchecked Sendable {}
extension WaterfallOrder: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.zveron.contract.order.external"

extension Field: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICE"),
    1: .same(proto: "ORDER_SERVICE_TYPE"),
    2: .same(proto: "DATE_CREATED"),
    3: .same(proto: "DISTANCE"),
  ]
}

extension Operation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EQUALITY"),
    1: .same(proto: "NEGATION"),
    2: .same(proto: "GREATER_THAN"),
    3: .same(proto: "GREATER_THAN_EQUALITY"),
    4: .same(proto: "LESS_THAN"),
    5: .same(proto: "LESS_THAN_EQUALITY"),
    6: .same(proto: "IN"),
    7: .same(proto: "NOT_IN"),
    8: .same(proto: "LIKE"),
  ]
}

extension Sort: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BY_PRICE"),
    1: .same(proto: "BY_DATE_CREATED"),
    2: .same(proto: "BY_DISTANCE"),
  ]
}

extension GetWaterfallRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetWaterfallRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_size"),
    2: .standard(proto: "last_order_id"),
    3: .same(proto: "filters"),
    4: .same(proto: "sort"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self._lastOrderID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.filters) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.sort) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 1)
    }
    try { if let v = self._lastOrderID {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    if !self.filters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filters, fieldNumber: 3)
    }
    if self.sort != .byPrice {
      try visitor.visitSingularEnumField(value: self.sort, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetWaterfallRequest, rhs: GetWaterfallRequest) -> Bool {
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs._lastOrderID != rhs._lastOrderID {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs.sort != rhs.sort {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Filter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Filter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field"),
    2: .same(proto: "operation"),
    3: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.field) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.field != .price {
      try visitor.visitSingularEnumField(value: self.field, fieldNumber: 1)
    }
    if self.operation != .equality {
      try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Filter, rhs: Filter) -> Bool {
    if lhs.field != rhs.field {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetWaterfallResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetWaterfallResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.orders) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetWaterfallResponse, rhs: GetWaterfallResponse) -> Bool {
    if lhs.orders != rhs.orders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WaterfallOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaterfallOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "animal"),
    3: .same(proto: "title"),
    4: .same(proto: "price"),
    5: .same(proto: "address"),
    6: .standard(proto: "service_date"),
    7: .standard(proto: "date_created"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._animal) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._address) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.serviceDate) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.dateCreated) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._animal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 4)
    }
    try { if let v = self._address {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.serviceDate.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceDate, fieldNumber: 6)
    }
    if !self.dateCreated.isEmpty {
      try visitor.visitSingularStringField(value: self.dateCreated, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: WaterfallOrder, rhs: WaterfallOrder) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._animal != rhs._animal {return false}
    if lhs.title != rhs.title {return false}
    if lhs.price != rhs.price {return false}
    if lhs._address != rhs._address {return false}
    if lhs.serviceDate != rhs.serviceDate {return false}
    if lhs.dateCreated != rhs.dateCreated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
