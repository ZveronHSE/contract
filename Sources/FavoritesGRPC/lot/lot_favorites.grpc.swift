//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: lot_favorites.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `LotFavoritesServiceClient`, then call methods of this protocol to make API calls.
public protocol LotFavoritesServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? { get }

  func addToFavorites(
    _ request: AddLotToFavoritesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AddLotToFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func removeFromFavorites(
    _ request: RemoveLotFromFavoritesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RemoveLotFromFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func existInFavorites(
    _ request: LotsExistInFavoritesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LotsExistInFavoritesRequest, LotsExistInFavoritesResponse>

  func getFavoriteLots(
    _ request: GetFavoriteLotsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetFavoriteLotsRequest, GetFavoriteLotsResponse>

  func getCounter(
    _ request: GetLotCounterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetLotCounterRequest, GetLotCounterResponse>

  func removeAllByOwner(
    _ request: RemoveAllLotsByOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RemoveAllLotsByOwnerRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func removeAllByFavoriteLot(
    _ request: RemoveAllByFavoriteLotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RemoveAllByFavoriteLotRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension LotFavoritesServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.LotFavoritesService"
  }

  /// Добавление объявления в избранное пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to addToFavorites.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addToFavorites(
    _ request: AddLotToFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AddLotToFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.addToFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddToFavoritesInterceptors() ?? []
    )
  }

  /// Удаление объявления из избранного пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to removeFromFavorites.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeFromFavorites(
    _ request: RemoveLotFromFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RemoveLotFromFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeFromFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveFromFavoritesInterceptors() ?? []
    )
  }

  /// Проверка на существование объявлений в избранном пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to existInFavorites.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func existInFavorites(
    _ request: LotsExistInFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LotsExistInFavoritesRequest, LotsExistInFavoritesResponse> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.existInFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeexistInFavoritesInterceptors() ?? []
    )
  }

  /// Получение списка избранных объявлений пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to getFavoriteLots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFavoriteLots(
    _ request: GetFavoriteLotsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetFavoriteLotsRequest, GetFavoriteLotsResponse> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getFavoriteLots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFavoriteLotsInterceptors() ?? []
    )
  }

  /// Получение количества добавлений объявления в избранное
  ///
  /// - Parameters:
  ///   - request: Request to send to getCounter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCounter(
    _ request: GetLotCounterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetLotCounterRequest, GetLotCounterResponse> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCounterInterceptors() ?? []
    )
  }

  /// Удаление всех записей из избранного определенного пользователя
  ///
  /// - Parameters:
  ///   - request: Request to send to removeAllByOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeAllByOwner(
    _ request: RemoveAllLotsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RemoveAllLotsByOwnerRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByOwnerInterceptors() ?? []
    )
  }

  /// Удаление опредленного объявления из всех список избранного
  ///
  /// - Parameters:
  ///   - request: Request to send to removeAllByFavoriteLot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeAllByFavoriteLot(
    _ request: RemoveAllByFavoriteLotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RemoveAllByFavoriteLotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByFavoriteLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByFavoriteLotInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension LotFavoritesServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "LotFavoritesServiceNIOClient")
public final class LotFavoritesServiceClient: LotFavoritesServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.LotFavoritesService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct LotFavoritesServiceNIOClient: LotFavoritesServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.LotFavoritesService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol LotFavoritesServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? { get }

  func makeAddToFavoritesCall(
    _ request: AddLotToFavoritesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<AddLotToFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeRemoveFromFavoritesCall(
    _ request: RemoveLotFromFavoritesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RemoveLotFromFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeExistInFavoritesCall(
    _ request: LotsExistInFavoritesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LotsExistInFavoritesRequest, LotsExistInFavoritesResponse>

  func makeGetFavoriteLotsCall(
    _ request: GetFavoriteLotsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetFavoriteLotsRequest, GetFavoriteLotsResponse>

  func makeGetCounterCall(
    _ request: GetLotCounterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetLotCounterRequest, GetLotCounterResponse>

  func makeRemoveAllByOwnerCall(
    _ request: RemoveAllLotsByOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RemoveAllLotsByOwnerRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeRemoveAllByFavoriteLotCall(
    _ request: RemoveAllByFavoriteLotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RemoveAllByFavoriteLotRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension LotFavoritesServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return LotFavoritesServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAddToFavoritesCall(
    _ request: AddLotToFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<AddLotToFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.addToFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddToFavoritesInterceptors() ?? []
    )
  }

  public func makeRemoveFromFavoritesCall(
    _ request: RemoveLotFromFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RemoveLotFromFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeFromFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveFromFavoritesInterceptors() ?? []
    )
  }

  public func makeExistInFavoritesCall(
    _ request: LotsExistInFavoritesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LotsExistInFavoritesRequest, LotsExistInFavoritesResponse> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.existInFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeexistInFavoritesInterceptors() ?? []
    )
  }

  public func makeGetFavoriteLotsCall(
    _ request: GetFavoriteLotsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetFavoriteLotsRequest, GetFavoriteLotsResponse> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getFavoriteLots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFavoriteLotsInterceptors() ?? []
    )
  }

  public func makeGetCounterCall(
    _ request: GetLotCounterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetLotCounterRequest, GetLotCounterResponse> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCounterInterceptors() ?? []
    )
  }

  public func makeRemoveAllByOwnerCall(
    _ request: RemoveAllLotsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RemoveAllLotsByOwnerRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByOwnerInterceptors() ?? []
    )
  }

  public func makeRemoveAllByFavoriteLotCall(
    _ request: RemoveAllByFavoriteLotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RemoveAllByFavoriteLotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByFavoriteLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByFavoriteLotInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension LotFavoritesServiceAsyncClientProtocol {
  public func addToFavorites(
    _ request: AddLotToFavoritesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.addToFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddToFavoritesInterceptors() ?? []
    )
  }

  public func removeFromFavorites(
    _ request: RemoveLotFromFavoritesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeFromFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveFromFavoritesInterceptors() ?? []
    )
  }

  public func existInFavorites(
    _ request: LotsExistInFavoritesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> LotsExistInFavoritesResponse {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.existInFavorites.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeexistInFavoritesInterceptors() ?? []
    )
  }

  public func getFavoriteLots(
    _ request: GetFavoriteLotsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetFavoriteLotsResponse {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getFavoriteLots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFavoriteLotsInterceptors() ?? []
    )
  }

  public func getCounter(
    _ request: GetLotCounterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetLotCounterResponse {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.getCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCounterInterceptors() ?? []
    )
  }

  public func removeAllByOwner(
    _ request: RemoveAllLotsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByOwnerInterceptors() ?? []
    )
  }

  public func removeAllByFavoriteLot(
    _ request: RemoveAllByFavoriteLotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: LotFavoritesServiceClientMetadata.Methods.removeAllByFavoriteLot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeremoveAllByFavoriteLotInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct LotFavoritesServiceAsyncClient: LotFavoritesServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LotFavoritesServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol LotFavoritesServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'addToFavorites'.
  func makeaddToFavoritesInterceptors() -> [ClientInterceptor<AddLotToFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'removeFromFavorites'.
  func makeremoveFromFavoritesInterceptors() -> [ClientInterceptor<RemoveLotFromFavoritesRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'existInFavorites'.
  func makeexistInFavoritesInterceptors() -> [ClientInterceptor<LotsExistInFavoritesRequest, LotsExistInFavoritesResponse>]

  /// - Returns: Interceptors to use when invoking 'getFavoriteLots'.
  func makegetFavoriteLotsInterceptors() -> [ClientInterceptor<GetFavoriteLotsRequest, GetFavoriteLotsResponse>]

  /// - Returns: Interceptors to use when invoking 'getCounter'.
  func makegetCounterInterceptors() -> [ClientInterceptor<GetLotCounterRequest, GetLotCounterResponse>]

  /// - Returns: Interceptors to use when invoking 'removeAllByOwner'.
  func makeremoveAllByOwnerInterceptors() -> [ClientInterceptor<RemoveAllLotsByOwnerRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'removeAllByFavoriteLot'.
  func makeremoveAllByFavoriteLotInterceptors() -> [ClientInterceptor<RemoveAllByFavoriteLotRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum LotFavoritesServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LotFavoritesService",
    fullName: "ru.zveron.LotFavoritesService",
    methods: [
      LotFavoritesServiceClientMetadata.Methods.addToFavorites,
      LotFavoritesServiceClientMetadata.Methods.removeFromFavorites,
      LotFavoritesServiceClientMetadata.Methods.existInFavorites,
      LotFavoritesServiceClientMetadata.Methods.getFavoriteLots,
      LotFavoritesServiceClientMetadata.Methods.getCounter,
      LotFavoritesServiceClientMetadata.Methods.removeAllByOwner,
      LotFavoritesServiceClientMetadata.Methods.removeAllByFavoriteLot,
    ]
  )

  public enum Methods {
    public static let addToFavorites = GRPCMethodDescriptor(
      name: "addToFavorites",
      path: "/ru.zveron.LotFavoritesService/addToFavorites",
      type: GRPCCallType.unary
    )

    public static let removeFromFavorites = GRPCMethodDescriptor(
      name: "removeFromFavorites",
      path: "/ru.zveron.LotFavoritesService/removeFromFavorites",
      type: GRPCCallType.unary
    )

    public static let existInFavorites = GRPCMethodDescriptor(
      name: "existInFavorites",
      path: "/ru.zveron.LotFavoritesService/existInFavorites",
      type: GRPCCallType.unary
    )

    public static let getFavoriteLots = GRPCMethodDescriptor(
      name: "getFavoriteLots",
      path: "/ru.zveron.LotFavoritesService/getFavoriteLots",
      type: GRPCCallType.unary
    )

    public static let getCounter = GRPCMethodDescriptor(
      name: "getCounter",
      path: "/ru.zveron.LotFavoritesService/getCounter",
      type: GRPCCallType.unary
    )

    public static let removeAllByOwner = GRPCMethodDescriptor(
      name: "removeAllByOwner",
      path: "/ru.zveron.LotFavoritesService/removeAllByOwner",
      type: GRPCCallType.unary
    )

    public static let removeAllByFavoriteLot = GRPCMethodDescriptor(
      name: "removeAllByFavoriteLot",
      path: "/ru.zveron.LotFavoritesService/removeAllByFavoriteLot",
      type: GRPCCallType.unary
    )
  }
}

