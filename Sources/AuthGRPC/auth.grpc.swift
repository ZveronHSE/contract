//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Ru_Zveron_Contract_Auth_AuthServiceClient`, then call methods of this protocol to make API calls.
public protocol Ru_Zveron_Contract_Auth_AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? { get }

  func loginBySocial(
    _ request: Ru_Zveron_Contract_Auth_LoginBySocialRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_LoginBySocialRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func loginByPassword(
    _ request: Ru_Zveron_Contract_Auth_LoginByPasswordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_LoginByPasswordRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func phoneLoginInit(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginInitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginInitRequest, Ru_Zveron_Contract_Auth_PhoneLoginInitResponse>

  func phoneLoginVerify(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest, Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse>

  func registerByPhone(
    _ request: Ru_Zveron_Contract_Auth_PhoneRegisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneRegisterRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func verifyToken(
    _ request: Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest, Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse>

  func issueNewTokens(
    _ request: Ru_Zveron_Contract_Auth_IssueNewTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_IssueNewTokensRequest, Ru_Zveron_Contract_Auth_MobileToken>
}

extension Ru_Zveron_Contract_Auth_AuthServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.contract.auth.AuthService"
  }

  ///логин через соц сеть
  ///
  /// - Parameters:
  ///   - request: Request to send to LoginBySocial.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loginBySocial(
    _ request: Ru_Zveron_Contract_Auth_LoginBySocialRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_LoginBySocialRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginBySocial.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginBySocialInterceptors() ?? []
    )
  }

  ///логин по паролю и телефону
  ///
  /// - Parameters:
  ///   - request: Request to send to LoginByPassword.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loginByPassword(
    _ request: Ru_Zveron_Contract_Auth_LoginByPasswordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_LoginByPasswordRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginByPassword.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginByPasswordInterceptors() ?? []
    )
  }

  ///попытка логина только по телефону, начальный этап, высылаем запрос в сторонний сервис
  ///на отправку смс/звонка для верификации
  ///
  /// - Parameters:
  ///   - request: Request to send to PhoneLoginInit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func phoneLoginInit(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginInitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginInitRequest, Ru_Zveron_Contract_Auth_PhoneLoginInitResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginInitInterceptors() ?? []
    )
  }

  ///попытка логина только по телефону, второй этап, пробуем провалидировать пришедший код
  ///если пользователь уже есть, возвращаем токены и флаг, что флоу логина
  ///
  /// - Parameters:
  ///   - request: Request to send to PhoneLoginVerify.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func phoneLoginVerify(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest, Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginVerify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginVerifyInterceptors() ?? []
    )
  }

  ///последний шаг логина по телефону, если пользователя еще не существует и создаем новый аккаунт
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterByPhone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerByPhone(
    _ request: Ru_Zveron_Contract_Auth_PhoneRegisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_PhoneRegisterRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.registerByPhone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterByPhoneInterceptors() ?? []
    )
  }

  ///запрос для верификации текущего токена доступа, передается из апигея в сервис авторизации
  ///потому токены можно передать в метадате
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyToken(
    _ request: Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest, Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.verifyToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyTokenInterceptors() ?? []
    )
  }

  ///запрос на получение новых токенов
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueNewTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func issueNewTokens(
    _ request: Ru_Zveron_Contract_Auth_IssueNewTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Zveron_Contract_Auth_IssueNewTokensRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.issueNewTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueNewTokensInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ru_Zveron_Contract_Auth_AuthServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ru_Zveron_Contract_Auth_AuthServiceNIOClient")
public final class Ru_Zveron_Contract_Auth_AuthServiceClient: Ru_Zveron_Contract_Auth_AuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.contract.auth.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ru_Zveron_Contract_Auth_AuthServiceNIOClient: Ru_Zveron_Contract_Auth_AuthServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.contract.auth.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ru_Zveron_Contract_Auth_AuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? { get }

  func makeLoginBySocialCall(
    _ request: Ru_Zveron_Contract_Auth_LoginBySocialRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_LoginBySocialRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func makeLoginByPasswordCall(
    _ request: Ru_Zveron_Contract_Auth_LoginByPasswordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_LoginByPasswordRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func makePhoneLoginInitCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginInitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginInitRequest, Ru_Zveron_Contract_Auth_PhoneLoginInitResponse>

  func makePhoneLoginVerifyCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest, Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse>

  func makeRegisterByPhoneCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneRegisterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneRegisterRequest, Ru_Zveron_Contract_Auth_MobileToken>

  func makeVerifyTokenCall(
    _ request: Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest, Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse>

  func makeIssueNewTokensCall(
    _ request: Ru_Zveron_Contract_Auth_IssueNewTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_IssueNewTokensRequest, Ru_Zveron_Contract_Auth_MobileToken>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Auth_AuthServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeLoginBySocialCall(
    _ request: Ru_Zveron_Contract_Auth_LoginBySocialRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_LoginBySocialRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginBySocial.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginBySocialInterceptors() ?? []
    )
  }

  public func makeLoginByPasswordCall(
    _ request: Ru_Zveron_Contract_Auth_LoginByPasswordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_LoginByPasswordRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginByPassword.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginByPasswordInterceptors() ?? []
    )
  }

  public func makePhoneLoginInitCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginInitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginInitRequest, Ru_Zveron_Contract_Auth_PhoneLoginInitResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginInitInterceptors() ?? []
    )
  }

  public func makePhoneLoginVerifyCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest, Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginVerify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginVerifyInterceptors() ?? []
    )
  }

  public func makeRegisterByPhoneCall(
    _ request: Ru_Zveron_Contract_Auth_PhoneRegisterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_PhoneRegisterRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.registerByPhone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterByPhoneInterceptors() ?? []
    )
  }

  public func makeVerifyTokenCall(
    _ request: Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest, Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.verifyToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyTokenInterceptors() ?? []
    )
  }

  public func makeIssueNewTokensCall(
    _ request: Ru_Zveron_Contract_Auth_IssueNewTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ru_Zveron_Contract_Auth_IssueNewTokensRequest, Ru_Zveron_Contract_Auth_MobileToken> {
    return self.makeAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.issueNewTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueNewTokensInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ru_Zveron_Contract_Auth_AuthServiceAsyncClientProtocol {
  public func loginBySocial(
    _ request: Ru_Zveron_Contract_Auth_LoginBySocialRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_MobileToken {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginBySocial.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginBySocialInterceptors() ?? []
    )
  }

  public func loginByPassword(
    _ request: Ru_Zveron_Contract_Auth_LoginByPasswordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_MobileToken {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginByPassword.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginByPasswordInterceptors() ?? []
    )
  }

  public func phoneLoginInit(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginInitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_PhoneLoginInitResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginInitInterceptors() ?? []
    )
  }

  public func phoneLoginVerify(
    _ request: Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginVerify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhoneLoginVerifyInterceptors() ?? []
    )
  }

  public func registerByPhone(
    _ request: Ru_Zveron_Contract_Auth_PhoneRegisterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_MobileToken {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.registerByPhone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterByPhoneInterceptors() ?? []
    )
  }

  public func verifyToken(
    _ request: Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.verifyToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyTokenInterceptors() ?? []
    )
  }

  public func issueNewTokens(
    _ request: Ru_Zveron_Contract_Auth_IssueNewTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ru_Zveron_Contract_Auth_MobileToken {
    return try await self.performAsyncUnaryCall(
      path: Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.issueNewTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueNewTokensInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ru_Zveron_Contract_Auth_AuthServiceAsyncClient: Ru_Zveron_Contract_Auth_AuthServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ru_Zveron_Contract_Auth_AuthServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'loginBySocial'.
  func makeLoginBySocialInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_LoginBySocialRequest, Ru_Zveron_Contract_Auth_MobileToken>]

  /// - Returns: Interceptors to use when invoking 'loginByPassword'.
  func makeLoginByPasswordInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_LoginByPasswordRequest, Ru_Zveron_Contract_Auth_MobileToken>]

  /// - Returns: Interceptors to use when invoking 'phoneLoginInit'.
  func makePhoneLoginInitInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_PhoneLoginInitRequest, Ru_Zveron_Contract_Auth_PhoneLoginInitResponse>]

  /// - Returns: Interceptors to use when invoking 'phoneLoginVerify'.
  func makePhoneLoginVerifyInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_PhoneLoginVerifyRequest, Ru_Zveron_Contract_Auth_PhoneLoginVerifyResponse>]

  /// - Returns: Interceptors to use when invoking 'registerByPhone'.
  func makeRegisterByPhoneInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_PhoneRegisterRequest, Ru_Zveron_Contract_Auth_MobileToken>]

  /// - Returns: Interceptors to use when invoking 'verifyToken'.
  func makeVerifyTokenInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_VerifyMobileTokenRequest, Ru_Zveron_Contract_Auth_VerifyMobileTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'issueNewTokens'.
  func makeIssueNewTokensInterceptors() -> [ClientInterceptor<Ru_Zveron_Contract_Auth_IssueNewTokensRequest, Ru_Zveron_Contract_Auth_MobileToken>]
}

public enum Ru_Zveron_Contract_Auth_AuthServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "ru.zveron.contract.auth.AuthService",
    methods: [
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginBySocial,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.loginByPassword,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginInit,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.phoneLoginVerify,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.registerByPhone,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.verifyToken,
      Ru_Zveron_Contract_Auth_AuthServiceClientMetadata.Methods.issueNewTokens,
    ]
  )

  public enum Methods {
    public static let loginBySocial = GRPCMethodDescriptor(
      name: "LoginBySocial",
      path: "/ru.zveron.contract.auth.AuthService/LoginBySocial",
      type: GRPCCallType.unary
    )

    public static let loginByPassword = GRPCMethodDescriptor(
      name: "LoginByPassword",
      path: "/ru.zveron.contract.auth.AuthService/LoginByPassword",
      type: GRPCCallType.unary
    )

    public static let phoneLoginInit = GRPCMethodDescriptor(
      name: "PhoneLoginInit",
      path: "/ru.zveron.contract.auth.AuthService/PhoneLoginInit",
      type: GRPCCallType.unary
    )

    public static let phoneLoginVerify = GRPCMethodDescriptor(
      name: "PhoneLoginVerify",
      path: "/ru.zveron.contract.auth.AuthService/PhoneLoginVerify",
      type: GRPCCallType.unary
    )

    public static let registerByPhone = GRPCMethodDescriptor(
      name: "RegisterByPhone",
      path: "/ru.zveron.contract.auth.AuthService/RegisterByPhone",
      type: GRPCCallType.unary
    )

    public static let verifyToken = GRPCMethodDescriptor(
      name: "VerifyToken",
      path: "/ru.zveron.contract.auth.AuthService/VerifyToken",
      type: GRPCCallType.unary
    )

    public static let issueNewTokens = GRPCMethodDescriptor(
      name: "IssueNewTokens",
      path: "/ru.zveron.contract.auth.AuthService/IssueNewTokens",
      type: GRPCCallType.unary
    )
  }
}

