syntax = "proto3";
import "google/protobuf/empty.proto";
package ru.zveron;

option java_package = "ru.zveron";
option java_outer_classname = "BlacklistCrudGrpc";
option java_multiple_files = true;

service BlacklistService {
  // Проверяет наличие определенного пользователя в черном списке владельца
  rpc ExistInBlacklist(ExistInBlacklistRequest) returns(ExistInBlacklistResponse);

  // Получение списка всех добавленных в черный список владельца других пользователей
  rpc GetBlacklist(GetBlacklistRequest) returns(GetBlacklistResponse);

  // Добавление в черный список владельца нового пользователя
  rpc AddToBlacklist(AddToBlacklistRequest) returns(google.protobuf.Empty);

  // Удаление из черного списка владельца определенного пользователя
  rpc DeleteFromBlacklist(DeleteFromBlacklistRequest) returns(google.protobuf.Empty);

  // Удаление всех упоминаний о добавлении в черный список определенного пользователя
  rpc DeleteAllRecordsWhereUserBlocks(DeleteAllRecordsWhereUserBlocksRequest) returns(google.protobuf.Empty);

  // Удаление всех записей в черном списке владельца
  rpc DeleteAllRecordsWhereUserIsBlocked(DeleteAllRecordsWhereUserIsBlockedRequest) returns(google.protobuf.Empty);
}

message ExistInBlacklistRequest {
  // Id владельца черного списка
  int64 owner_id = 1;
  int64 target_user_id = 2;
}

message ExistInBlacklistResponse {
  bool exists = 1;
}

message GetBlacklistRequest {
  // Id владельца черного списка
  int64 id = 1;
}

message GetBlacklistResponse {
  repeated BlacklistUser blacklist_users = 1;
}

message BlacklistUser {
  int64 id = 1;
}

message AddToBlacklistRequest {
  // Id владельца черного списка
  int64 owner_id = 1;
  // Id пользователя, добавляемого в черный список
  int64 target_user_id = 2;
}

message DeleteFromBlacklistRequest {
  // Id владельца черного списка
  int64 owner_id = 1;
  // Id пользователя, удаляемого из черного списка
  int64 deleted_user_id = 2;
}

message DeleteAllRecordsWhereUserBlocksRequest {
  // Id владельца черного списка
  int64 owner_id = 1;
}

message DeleteAllRecordsWhereUserIsBlockedRequest {
  // Id пользователя, удаляемого из всех черных списков
  int64 deleted_user_id = 1;
}
