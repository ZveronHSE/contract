//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: category.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CategoryServiceClient`, then call methods of this protocol to make API calls.
public protocol CategoryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CategoryServiceClientInterceptorFactoryProtocol? { get }

  func getChild(
    _ request: CategoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CategoryRequest, CategoryResponse>

  func getCategoryTree(
    _ request: CategoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CategoryRequest, CategoryResponse>
}

extension CategoryServiceClientProtocol {
  public var serviceName: String {
    return "ru.zveron.contract.category.CategoryService"
  }

  /// Получить список подкатегорий для категории
  ///
  /// - Parameters:
  ///   - request: Request to send to getChild.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChild(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CategoryRequest, CategoryResponse> {
    return self.makeUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getChild.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetChildInterceptors() ?? []
    )
  }

  /// Получить всю семью для категории, то есть если A->B->C, то вернет A, B, C
  ///
  /// - Parameters:
  ///   - request: Request to send to getCategoryTree.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCategoryTree(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CategoryRequest, CategoryResponse> {
    return self.makeUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getCategoryTree.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCategoryTreeInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension CategoryServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "CategoryServiceNIOClient")
public final class CategoryServiceClient: CategoryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CategoryServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: CategoryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ru.zveron.contract.category.CategoryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CategoryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct CategoryServiceNIOClient: CategoryServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CategoryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.zveron.contract.category.CategoryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CategoryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CategoryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CategoryServiceClientInterceptorFactoryProtocol? { get }

  func makeGetChildCall(
    _ request: CategoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CategoryRequest, CategoryResponse>

  func makeGetCategoryTreeCall(
    _ request: CategoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CategoryRequest, CategoryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CategoryServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CategoryServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: CategoryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetChildCall(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CategoryRequest, CategoryResponse> {
    return self.makeAsyncUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getChild.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetChildInterceptors() ?? []
    )
  }

  public func makeGetCategoryTreeCall(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CategoryRequest, CategoryResponse> {
    return self.makeAsyncUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getCategoryTree.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCategoryTreeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CategoryServiceAsyncClientProtocol {
  public func getChild(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CategoryResponse {
    return try await self.performAsyncUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getChild.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetChildInterceptors() ?? []
    )
  }

  public func getCategoryTree(
    _ request: CategoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CategoryResponse {
    return try await self.performAsyncUnaryCall(
      path: CategoryServiceClientMetadata.Methods.getCategoryTree.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetCategoryTreeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct CategoryServiceAsyncClient: CategoryServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CategoryServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CategoryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol CategoryServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getChild'.
  func makegetChildInterceptors() -> [ClientInterceptor<CategoryRequest, CategoryResponse>]

  /// - Returns: Interceptors to use when invoking 'getCategoryTree'.
  func makegetCategoryTreeInterceptors() -> [ClientInterceptor<CategoryRequest, CategoryResponse>]
}

public enum CategoryServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CategoryService",
    fullName: "ru.zveron.contract.category.CategoryService",
    methods: [
      CategoryServiceClientMetadata.Methods.getChild,
      CategoryServiceClientMetadata.Methods.getCategoryTree,
    ]
  )

  public enum Methods {
    public static let getChild = GRPCMethodDescriptor(
      name: "getChild",
      path: "/ru.zveron.contract.category.CategoryService/getChild",
      type: GRPCCallType.unary
    )

    public static let getCategoryTree = GRPCMethodDescriptor(
      name: "getCategoryTree",
      path: "/ru.zveron.contract.category.CategoryService/getCategoryTree",
      type: GRPCCallType.unary
    )
  }
}

